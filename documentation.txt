Node Expressions(Lite)
======================

#########################################################################
# NOTE : This is the 'Lite' version of Node Expressions. See Upgrade    #
#        information for how to upgrade to the 'Full' version           #
#########################################################################

The Node Expressions add-on provides a means to enter a mathematical expression 
which is automatically parsed to generate a node group built up of standard maths
nodes (and so is GPU-friendly) to implement that expression. It is available within
the Node Editor 'Add' menu as 'Maths Expression'. On selecting the menu option 
you'll be presented with a popup window prompting you to enter your expression.

For example, entering the expression 'a + b' will result in a node with two inputs ('a'
and 'b'), outputting a single value that is the mathematical sum of 'a' and 'b'.
The expression will be contained within a new node group with the inputs and outputs
named appropriately (in this case 'a' and 'b'). The output of the group can be
indicated by including the name in the expression as in 'SumOfValues = a + b'.

The following standard mathematical operations are implemented :

    Operation           Example     Description/Notes
    ------------------- ----------- -----------------------------
    Addition            a + b       Add two numbers together
    Subtraction         a - b       Subtract one number from another
    Multiplication      a * b       Multiply two numbers together
    Division            a / b       Divide one number by another
    Power               a ** b      Raise one number to the power of the other
    Sine                sin(x)      Calculate the Sine of an angle (in radians)
    Cosine              cos(x)      Calculate the Cosine of an angle (in radians)
    Tangent             tan(x)      Calculate the Tangent of an angle (in radians)
    Arcsine             asin(x)     Inverse Sine
    Arccosine           acos(x)     Inverse Cosine
    Arctangent          atan(x)     Inverse Tangent (convert gradient to angle)
    Arctangent(2)       atan2(x,y)  Alternative Arctangent accepting two arguments (components of gradient to angle)
    Absolute            abs(x)      The magnitude of the value (ie, ignore the sign if negative)
    Round               round(x)    Round to the nearest whole number
    Maximum             max(x,y)    Determine the largest of the provided values (can list any number of input values - eg, 'max(a,b,c,d,e,....)'
    Minimum             min(x,y)    Determine the smallest of the provided values (can list any number of input values - eg, 'min(a,b,c,d,e,....)'
    Modulo              mod(x,y)    Return the Modulo (the remainder after dividing x by y) (symetrical for negative values)
    Mathematical Modulo mmod(x,y)   Return the Modulo (the remainder after dividing x by y) (mathematically correct modulo function)
    Log                 log(x,y)    Return the Logarithm
    Greater Than        x > y       'True' (1.0) if the first value is greater than the second, else 'False' (0.0)
    Less Than           x < y       'True' (1.0) if the first value is less than the second, else 'False' (0.0)
    Greater or Equal    x >= y      'True' (1.0) if the first value is greater than or equal to the second, else 'False' (0.0)
    Less Than or Equals x <= y      'True' (1.0) if the first value is less than or equal to the second, else 'False' (0.0)
    Equals              x == y      'True' (1.0) if the two values are equal, else 'False' (0.0)
    Not                 not(a)      Invert the logical value ('True' becomes 'False', 'False' becomes 'True')
    And                 and(a,b)    Logically combine multiple values with the 'and' operator (ie, only produce 'True' if all inputs are 'True')
    Or                  or(a,b)     Logically combine multiple values with the 'or' operator (ie, produce 'True' if any input is 'True')
    Exclusive-Or        xor(a,b)    Logical 'exclusive-or' operation
    Clamp               clamp(a)    Clamp the value to be within the range 0.0 to 1.0
    Clip                clip(a)     Same as 'clamp'
    Fraction            fract(a)    Return the fractional part of a number (eg, 'fract(5.678)' would return '0.678')
    Floor               floor(a)    Round down to the next lowest whole number
    Ceiling             ceil(a)     Round up to the next highest whole number
    
    
Additionally, you can work with Vectors using the following operations :

    Operation           Example         Description/Notes
    ------------------- --------------- -------------------------
    Combine components  combine(x,y,z)  Combine individual values to create a vector
    Add                 vadd(v,w)       Add two vectors together
    Subtract            vsub(v,w)       Subtract one vector from the other
    Multiply            vmult(v,w)      Multiply components of two vectors to produce new vector (x*x, y*y, z*z)
    Divide              vdiv(v,w)       Divide components of two vectors to produce new vector (x/x, y/y, z/z)
    Dot Product         vdot(v,w)       Return the dot-product of the two input vectors
    Cross Product       vcross(v,w)     Return the cross-product of the two input vectors
    Normalize           vnorm(v)        Scale a vector so that it has length of 1.0
    (split vector)      v[n]            Extract a 'channel' from a vector - ie, the x,y,z components of a vector. 
                                         Valid components are '[0]', '[1]', '[2]' for the first, second, third
                                         component although can alternatively reference as '[x]', '[y]', '[z]'
                                         or '[r]', '[g]', '[b]' for convenience when dealing with position/
                                         direction vectors or colors


Textures and additional functions are also available :

    Function    Example                                     Description/Notes
    ---------------------------------------------------------------------------------
    Noise       noise(vector, scale, detail, distortion)    The 'detail' and 'distortion' parameters are 
                                                             optional (default values will be assumed)
                                                             
    Musgrave    musgrave(vector,scale,det,dim,lac,off,gain) The last 5 arguments are optional and defaulted if not present
                musgrave.fbm(vector,scale,....)             Same as above ('fBM' is the default musgrave type)
                musgrave.mf(vector,scale,....)              As above but Multi-Fractal
                musgrave.rmf(vector,scale,....)             As above but Multi-Fractal
                musgrave.hmf(vector,scale,....)             As above but Multi-Fractal
                musgrave.ht(vector,scale,....)              As above but Hetero Terrain
                
    Voronoi     voronoi(vector, scale)                      Voronoi texture ('intensity' mode)
                voronoi.cell(vector, scale)                 Voronoi 'cells'
                
    Color Ramp  colorramp(value, val1, col1, ...)           Color Ramp with the specified color points (val, col). Colors can be defined either as a single value for greyscale or using 'combine(r,g,b)' for a color
                colorramp(value, options, val1, col1, ...)  As above but including options to set color mode (RGB, HSV, HSL), hue interpolation (NEAR, FAR, CW, CCW), interpolation ('EASE', 'CARDINAL', 'LINEAR', 'B_SPLINE', 'CONSTANT')


(Group node functionality is available in the 'Full' version of this add-on)

Any of the above functions, operators and comparators can be combined into a single
expression and standard operator precedence rules should be followed - ie, power
takes precedence over multiplication and division, which take precedence over addition
and subtraction. Comparators (ie, >, <, >=, <=, ==) take least precedence. The
expression can also include brackets to indicate overriding the operator precedence.

The expression can be edited using the Edit button of the custom node automatically
created within the node group. The node group is fully GPU-compatible (since it only
uses 'standard' shader nodes) and can be exported to use in a Blend file independently
of the add-on.

The expression can be arbitrarily complicated and the group inputs and outputs will be
automatically updated with the appropriate inputs and outputs to the expression.


Named Expressions
=================
If an expression does not indicate a specific name for the expression it will be labelled
as 'Value' - and this will be used for the group output socket label. However, an
alternative 'name' can be given to the expression by using the '=' operator (which is
distinct from the '==' operator that indicates a test on equality - the '=' operator
indicates asignment). For example, to name an expression that sums 3 input values as
'Sum' you could simply enter :

    Sum = a + b + c


Sub-Expressions
===============
Multiple expressions can be entered by separating them with commas. In this case, each
can be assigned a different name so that the final node provides multiple named
outputs :

    Sum = a+b+c, Maximum = max(a,b,c), Minimum = min(a+b+c)

(The 'Full' version of this add-on allows sub-expressions to reference
 each other to enable creation of much more complicated node groups.)


Default Values
==============

Default values can be set for any input variable by adding a suffix within '{}' braces
following any one usage of that variable. For example, to create a group to sum 3
values with default values of 0.25, 0.5 and 0.1 you could enter :

    Sum=a{0.25}+b{0.5}+c{0.1}

The defaults are only used when creating a new expression node or when creating a new
group from an existing expression. Editing an existing expression to include defaults
will not update any existing nodes.


Vectors
=======
When creating an expression you can indicate that a result should be interpreted as a
Vector by including a suffix of '[]'. In addition, multiple individual values can be
combined into a vector using the 'combine(...)' function as follows :

    Vector[] = combine(x,y,z)
    
Furthermore, a vector can be split into its individual sub-elements by including a
'[n]' suffix - with 'n' indicating which part of the vector to extract. For example,
to use the individual elements of an input vector ('Input') and calculate its length
you could use the following :

    Length = (Input[0]**2 + Input[1]**2 + Input[2]**2) ** 0.5
    
(ie, length equals square-root of the sum of the squares (pythagoras))

For convenience, you can alternatively use '[x]', '[y]', '[z]' for location/direction
vectors or '[r]', '[g]', '[b]' to extract the elements of a Color. These are equivalent
and interchangeable with '[0]', '[1]' and '[2]'.
    
Input Vectors can be split into their component parts by including the suffix - for 
example, 'vector[x]' wil extract the first element of the vector. Output variables can 
be defined as vector type by suffixing with '[]', and individual components can be
combined into a vector using the 'combine(...)' function.


'Special' Variables
===================
A number of 'special' variables can be used in expressions to represent common input
values such as those available via the Texture Coordinates or Geometry input nodes.
Including any of these as input variables to your expression will result in the relevant
node (eg, Texture Coordinate or Geometry) being added to the group and linked in the
appropriate place.

Texture Coordinate :

    Variable            Node                    Socket
    ------------------- ----------------------- -------------
    Input.Generated     Texture Coordinate      Generated
    Input.Normal        Texture Coordinate      Normal
    Input.UV            Texture Coordinate      UV
    Input.Object        Texture Coordinate      Object
    Input.Camera        Texture Coordinate      Camera
    Input.Window        Texture Coordinate      Window
    Input.Reflection    Texture Coordinate      Reflection


Geometry :

    Variable            Node                    Socket
    ------------------- ----------------------- -------------
    Geom.Position       Geometry                Position
    Geom.Normal         Geometry                Normal
    Geom.TrueNormal     Geometry                True Normal
    Geom.Tangent        Geometry                Tangent
    Geom.Incoming       Geometry                Incoming
    Geom.Parametric     Geometry                Parametric
    Geom.Backfacing     Geometry                Backfacing
    Geom.Pointiness     Geometry                Pointiness


Object Info :

    Variable            Node                    Socket
    ------------------- ----------------------- -------------
    Object.Index        Object Info             Index
    Object.Material     Object Info             Material Index
    Object.Random       Object Info             Random
    Object.Location     Object Info             Location


Particle Info :

    Variable                   Node                Socket
    -------------------------- ------------------- -------------
     Particle.Index            Particle Info       Index
     Particle.Age              Particle Info       Age
     Particle.Lifetime         Particle Info       Lifetime
     Particle.Location         Particle Info       Location
     Particle.Size             Particle Info       Size
     Particle.Velocity         Particle Info       Velocity
     Particle.AngularVelocity  Particle Info       Angular Velocity
     Particle.Random           Particle Info       Random


Editing Expressions
===================
When an expression node group is created an additional node is created to allow the
group to be manipulated. The node shows the expression along with an 'Edit' button
which allows the group to be easily edited. In addition to providing the 'Edit'
button the node can also provide other features depending on the current state of
the expression (such as 'Revert' to allow the expression to be reset if and edit
was invalid, (or to 'Update' when a text block has been amended ('Full' version only)).


Text Blocks
===========
(The 'Full' version provides facilities to edit the expression within the Text Editor.
This allows much easier editing of the expression, allows formatting and comments, and
updating of the node group can be achieved with a single click.)


Presets
=======
(The 'Full' version of the add-on comes with a set of pre-written 'preset' expressions,
including waves, stars, spirals, hexagons, and various other functions. Many of the
presets can be configurable (eg, by changing what input coordinates are used) and all
are customisable within the Text Editor. The presets can be used as-is or can be used
as reference examples to build your own expressions.)


Some Examples
=============
Here are a number of examples to get you started and show what's possible :

Grid
    (mod(x,0.1)/0.1>0.1)*(mod(y,0.1)/0.1>0.1)

Grid(with variable Scale and Thickness)
    (mod(x,1/Scale)/(1/Scale)>Thickness)*(mod(y,1/Scale)/(1/Scale)>Thickness)

Wave
    abs(x-(sin(y*10)/2.5+0.5))>0.1

Combined waves
    abs(x-sin(y*freq1)*amp1-sin(y*freq2)*amp2-sin(y*freq3)*amp3)<0.05

Fan
    mod(atan2(x-0.5,y-0.5)+3.141,0.5)/0.5

Star
    Output=((x**2+y**2)**0.5)>(sin(atan2(y,x)*Points{5})/2+0.5)*(Outer{0.6}-Inner{0.3})+Inner

